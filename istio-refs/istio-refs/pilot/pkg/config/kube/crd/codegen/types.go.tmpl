// Copyright Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by pilot/pkg/config/kube/crd/codegen/types.go. DO NOT EDIT!

package crd

// This file contains Go definitions for Custom Resource Definition kinds
// to adhere to the idiomatic use of k8s API machinery.
// These definitions are synthesized from Istio configuration type descriptors
// as declared in the Istio config model.

import (
      metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
      "k8s.io/apimachinery/pkg/runtime"

      "istio.io/istio/pkg/config/schema/collection"
      "istio.io/istio/pkg/config/schema/collections"
      "istio.io/istio/pkg/config/schema/resource"
)

type SchemaType struct {
        Schema     collection.Schema
        Object     IstioObject
        Collection IstioObjectList
}

// SupportedSchemas for all supported types.
var SupportedSchemas = collection.NewSchemasBuilder().
{{- range . }}
    MustAdd(collections.{{ .IstioKind }}).
{{- end }}
    Build()

// SupportedTypes maps kind to the resource information for the type.
var SupportedTypes = map[resource.GroupVersionKind]SchemaType{
{{range $index, $element := .}}collections.{{ .IstioKind }}.Resource().GroupVersionKind(): {
        Schema: collections.{{ .IstioKind }},
        Object: &{{ .IstioKind }}{
            TypeMeta: metav1.TypeMeta{
                Kind:       "{{ .CrdKind }}",
                APIVersion: collections.{{ .IstioKind }}.Resource().APIVersion(),
            },
        },
        Collection: &{{ .IstioKind }}List{},
    },
{{end}}
}

{{range $index, $element := .}}
// {{ .IstioKind }} is the generic Kubernetes API Object wrapper
type {{ .IstioKind }} struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata"`
	Spec               map[string]interface{} `json:"spec"`
}

// GetSpec from a wrapper
func (in *{{ .IstioKind }}) GetSpec() map[string]interface{} {
	return in.Spec
}

// SetSpec for a wrapper
func (in *{{ .IstioKind }}) SetSpec(spec map[string]interface{}) {
	in.Spec = spec
}

// GetObjectMeta from a wrapper
func (in *{{ .IstioKind }}) GetObjectMeta() metav1.ObjectMeta {
	return in.ObjectMeta
}

// SetObjectMeta for a wrapper
func (in *{{ .IstioKind }}) SetObjectMeta(metadata metav1.ObjectMeta) {
	in.ObjectMeta = metadata
}

// {{ .IstioKind }}List is the generic Kubernetes API list wrapper
type {{ .IstioKind }}List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`
	Items            []{{ .IstioKind }} `json:"items"`
}

// GetItems from a wrapper
func (in *{{ .IstioKind }}List) GetItems() []IstioObject {
	out := make([]IstioObject, len(in.Items))
	for i := range in.Items {
		out[i] = &in.Items[i]
	}
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *{{ .IstioKind }}) DeepCopyInto(out *{{ .IstioKind }}) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	out.Spec = in.Spec
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new {{ .IstioKind }}.
func (in *{{ .IstioKind }}) DeepCopy() *{{ .IstioKind }} {
	if in == nil {
		return nil
	}
	out := new({{ .IstioKind }})
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *{{ .IstioKind }}) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}

	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *{{ .IstioKind }}List) DeepCopyInto(out *{{ .IstioKind }}List) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]{{ .IstioKind }}, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new {{ .IstioKind }}List.
func (in *{{ .IstioKind }}List) DeepCopy() *{{ .IstioKind }}List {
	if in == nil {
		return nil
	}
	out := new({{ .IstioKind }}List)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *{{ .IstioKind }}List) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}

	return nil
}
{{end}}
