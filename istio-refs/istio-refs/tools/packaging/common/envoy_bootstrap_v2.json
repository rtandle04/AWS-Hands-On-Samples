{
  "node": {
    "id": "{{ .nodeID }}",
    "cluster": "{{ .cluster }}",
    "locality": {
      {{- if .region }}
      "region": "{{ .region }}",
      {{- end }}
      {{- if .zone }}
      "zone": "{{ .zone }}",
      {{- end }}
      {{- if .sub_zone }}
      "sub_zone": "{{ .sub_zone }}",
      {{- end }}
    },
    "metadata": {{ .meta_json_str }}
  },
  "stats_config": {
    "use_all_default_tags": false,
    "stats_tags": [
      {
        "tag_name": "cluster_name",
        "regex": "^cluster\\.((.+?(\\..+?\\.svc\\.cluster\\.local)?)\\.)"
      },
      {
        "tag_name": "tcp_prefix",
        "regex": "^tcp\\.((.*?)\\.)\\w+?$"
      },
      {
          "regex": "(response_code=\\.=(.+?);\\.;)|_rq(_(\\.d{3}))$",
          "tag_name": "response_code"
      },
      {
        "tag_name": "response_code_class",
        "regex": "_rq(_(\\dxx))$"
      },
      {
        "tag_name": "http_conn_manager_listener_prefix",
        "regex": "^listener(?=\\.).*?\\.http\\.(((?:[_.[:digit:]]*|[_\\[\\]aAbBcCdDeEfF[:digit:]]*))\\.)"
      },
      {
        "tag_name": "http_conn_manager_prefix",
        "regex": "^http\\.(((?:[_.[:digit:]]*|[_\\[\\]aAbBcCdDeEfF[:digit:]]*))\\.)"
      },
      {
        "tag_name": "listener_address",
        "regex": "^listener\\.(((?:[_.[:digit:]]*|[_\\[\\]aAbBcCdDeEfF[:digit:]]*))\\.)"
      },
      {
        "tag_name": "mongo_prefix",
        "regex": "^mongo\\.(.+?)\\.(collection|cmd|cx_|op_|delays_|decoding_)(.*?)$"
      },
      {
          "regex": "(reporter=\\.=(.+?);\\.;)",
          "tag_name": "reporter"
      },
      {
          "regex": "(source_namespace=\\.=(.+?);\\.;)",
          "tag_name": "source_namespace"
      },
      {
          "regex": "(source_workload=\\.=(.+?);\\.;)",
          "tag_name": "source_workload"
      },
      {
          "regex": "(source_workload_namespace=\\.=(.+?);\\.;)",
          "tag_name": "source_workload_namespace"
      },
      {
          "regex": "(source_principal=\\.=(.+?);\\.;)",
          "tag_name": "source_principal"
      },
      {
          "regex": "(source_app=\\.=(.+?);\\.;)",
          "tag_name": "source_app"
      },
      {
          "regex": "(source_version=\\.=(.+?);\\.;)",
          "tag_name": "source_version"
      },
      {
          "regex": "(destination_namespace=\\.=(.+?);\\.;)",
          "tag_name": "destination_namespace"
      },
      {
          "regex": "(destination_workload=\\.=(.+?);\\.;)",
          "tag_name": "destination_workload"
      },
      {
          "regex": "(destination_workload_namespace=\\.=(.+?);\\.;)",
          "tag_name": "destination_workload_namespace"
      },
      {
          "regex": "(destination_principal=\\.=(.+?);\\.;)",
          "tag_name": "destination_principal"
      },
      {
          "regex": "(destination_app=\\.=(.+?);\\.;)",
          "tag_name": "destination_app"
      },
      {
          "regex": "(destination_version=\\.=(.+?);\\.;)",
          "tag_name": "destination_version"
      },
      {
          "regex": "(destination_service=\\.=(.+?);\\.;)",
          "tag_name": "destination_service"
      },
      {
          "regex": "(destination_service_name=\\.=(.+?);\\.;)",
          "tag_name": "destination_service_name"
      },
      {
          "regex": "(destination_service_namespace=\\.=(.+?);\\.;)",
          "tag_name": "destination_service_namespace"
      },
      {
        "regex": "(destination_port=\\.=(.+?);\\.;)",
        "tag_name": "destination_port"
      },
      {
          "regex": "(request_protocol=\\.=(.+?);\\.;)",
          "tag_name": "request_protocol"
      },
      {
          "regex": "(response_flags=\\.=(.+?);\\.;)",
          "tag_name": "response_flags"
      },
      {
          "regex": "(grpc_response_status=\\.=(.*?);\\.;)",
          "tag_name": "grpc_response_status"
      },
      {
          "regex": "(connection_security_policy=\\.=(.+?);\\.;)",
          "tag_name": "connection_security_policy"
      },
      {
          "regex": "(permissive_response_code=\\.=(.+?);\\.;)",
          "tag_name": "permissive_response_code"
      },
      {
          "regex": "(permissive_response_policyid=\\.=(.+?);\\.;)",
          "tag_name": "permissive_response_policyid"
      },
      {
          "regex": "(cache\\.(.+?)\\.)",
          "tag_name": "cache"
      },
      {
          "regex": "(component\\.(.+?)\\.)",
          "tag_name": "component"
      },
      {
          "regex": "(tag\\.(.+?);\\.)",
          "tag_name": "tag"
      },
      {{- range $a, $tag := .extraStatTags }}
      {
          "regex": "({{ $tag }}=\\.=(.*?);\\.;)",
          "tag_name": "{{ $tag }}"
      },
      {{- end }}
      {
          "regex": "(source_canonical_service=\\.=(.+?);\\.;)",
          "tag_name": "source_canonical_service"
      },
      {
          "regex": "(destination_canonical_service=\\.=(.+?);\\.;)",
          "tag_name": "destination_canonical_service"
      },
      {
          "regex": "(source_canonical_revision=\\.=(.+?);\\.;)",
          "tag_name": "source_canonical_revision"
      },
      {
          "regex": "(destination_canonical_revision=\\.=(.+?);\\.;)",
          "tag_name": "destination_canonical_revision"
      }
    ],
    "stats_matcher": {
      "inclusion_list": {
        "patterns": [
          {
          "prefix": "reporter="
          },
          {
          "prefix": "component"
          },
          {{- range $a, $s := .inclusionPrefix }}
          {
          "prefix": "{{$s}}"
          },
          {{- end }}
          {{- range $a, $s := .inclusionSuffix }}
          {
          "suffix": "{{$s}}"
          },
          {{- end }}
          {{- range $a, $s := .inclusionRegexps }}
          {
          "regex": "{{js $s}}"
          },
          {{- end }}
        ]
      }
    }
  },
  "admin": {
    "access_log_path": "/dev/null",
    "address": {
      "socket_address": {
        "address": "{{ .localhost }}",
        "port_value": {{ .config.ProxyAdminPort }}
      }
    }
  },
  "dynamic_resources": {
    "lds_config": {
      "ads": {}
    },
    "cds_config": {
      "ads": {}
    },
    "ads_config": {
      "api_type": "GRPC",
      "grpc_services": [
        {
          "envoy_grpc": {
            "cluster_name": "xds-grpc"
          }
        }
      ]
    }
  },
  "static_resources": {
    "clusters": [
      {
        "name": "prometheus_stats",
        "type": "STATIC",
        "connect_timeout": "0.250s",
        "lb_policy": "ROUND_ROBIN",
        "load_assignment": {
          "cluster_name": "prometheus_stats",
          "endpoints": [{
            "lb_endpoints": [{
              "endpoint": {
                "address":{
                  "socket_address": {
                    "protocol": "TCP",
                    "address": "{{ .localhost }}",
                    "port_value": {{ .config.ProxyAdminPort }}
                  }
                }
              }
            }]
          }]
        }
      },
      {
        "name": "sds-grpc",
        "type": "STATIC",
        "http2_protocol_options": {},
        "connect_timeout": "{{ .connect_timeout }}",
        "lb_policy": "ROUND_ROBIN",
        "load_assignment": {
          "cluster_name": "sds-grpc",
          "endpoints": [{
            "lb_endpoints": [{
              "endpoint": {
                "address":{
                  "pipe": {
                    "path": "/etc/istio/proxy/SDS"
                  }
                }
              }
            }]
          }]
        }
      },
      {
        "name": "xds-grpc",
        "type": "STRICT_DNS",
        "respect_dns_ttl": true,
        "dns_lookup_family": "{{ .dns_lookup_family }}",
        "connect_timeout": "{{ .connect_timeout }}",
        "lb_policy": "ROUND_ROBIN",
        {{- if eq .config.ControlPlaneAuthPolicy 1 }}
        "transport_socket": {
          "name": "envoy.transport_sockets.tls",
          "typed_config": {
            "@type": "type.googleapis.com/envoy.api.v2.auth.UpstreamTlsContext",
            "common_tls_context": {
              "alpn_protocols": [
                "h2"
              ],
              {{- if .sds_uds_path }}
              "tls_certificate_sds_secret_configs": [
                {
                  "name": "default",
                  "sds_config": {
                    "api_config_source": {
                      "api_type": "GRPC",
                      "grpc_services": [
                        {
                          "envoy_grpc": { "cluster_name": "sds-grpc" }
                        }
                      ]
                    }
                  }
                }
              ],
              "validation_context": {
                "trusted_ca": {
                  {{- if eq .pilot_cert_provider "kubernetes" }}
                  "filename": "./var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
                  {{- else if eq .pilot_cert_provider "istiod" }}
                  "filename": "./var/run/secrets/istio/root-cert.pem"
                  {{- end }}
                },
                "verify_subject_alt_name": {{ toJSON .pilot_SAN }}
              }
              {{- else }}
              "tls_certificates": [
                {
                  "certificate_chain": { "filename": "/etc/certs/cert-chain.pem" },
                  "private_key": { "filename": "/etc/certs/key.pem" }
                }
              ],
              "validation_context": {
                "trusted_ca": { "filename": "/etc/certs/root-cert.pem" },
                "verify_subject_alt_name": {{ toJSON .pilot_SAN }}
              },
              {{- end }}
            }
          }
        },
        {{- end }}
        "load_assignment": {
          "cluster_name": "xds-grpc",
          "endpoints": [{
            "lb_endpoints": [{
              "endpoint": {
                "address":{
                  "socket_address": {{ .pilot_grpc_address }}
                }
              }
            }]
          }]
        },
        "circuit_breakers": {
          "thresholds": [
            {
              "priority": "DEFAULT",
              "max_connections": 100000,
              "max_pending_requests": 100000,
              "max_requests": 100000
            },
            {
              "priority": "HIGH",
              "max_connections": 100000,
              "max_pending_requests": 100000,
              "max_requests": 100000
            }
          ]
        },
        "upstream_connection_options": {
          "tcp_keepalive": {
            "keepalive_time": 300
          }
        },
        "max_requests_per_connection": 1,
        "http2_protocol_options": { }
      }
      {{ if .zipkin }}
      ,
      {
        "name": "zipkin",
        "type": "STRICT_DNS",
        "respect_dns_ttl": true,
        "dns_lookup_family": "{{ .dns_lookup_family }}",
        "connect_timeout": "1s",
        "lb_policy": "ROUND_ROBIN",
        "load_assignment": {
          "cluster_name": "zipkin",
          "endpoints": [{
            "lb_endpoints": [{
              "endpoint": {
                "address":{
                  "socket_address": {{ .zipkin }}
                }
              }
            }]
          }]
        }
      }
      {{ else if .lightstep }}
      ,
      {
        "name": "lightstep",
        "http2_protocol_options": {},
        {{ if .lightstepSecure }}
        "tls_context": {
          "common_tls_context": {
            "alpn_protocols": [
              "h2"
            ],
            "validation_context": {
              "trusted_ca": {
                "filename": "{{ .lightstepCacertPath }}"
              }
            }
          }
        },
        {{ end }}
        "type": "STRICT_DNS",
        "respect_dns_ttl": true,
        "dns_lookup_family": "{{ .dns_lookup_family }}",
        "connect_timeout": "1s",
        "lb_policy": "ROUND_ROBIN",
        "load_assignment": {
          "cluster_name": "lightstep",
          "endpoints": [{
            "lb_endpoints": [{
              "endpoint": {
                "address":{
                  "socket_address": {{ .lightstep }}
                }
              }
            }]
          }]
        }
      }
      {{ else if .datadog }}
      ,
      {
        "name": "datadog_agent",
        "connect_timeout": "1s",
        "type": "STRICT_DNS",
        "respect_dns_ttl": true,
        "dns_lookup_family": "{{ .dns_lookup_family }}",
        "lb_policy": "ROUND_ROBIN",
        "load_assignment": {
          "cluster_name": "datadog_agent",
          "endpoints": [{
            "lb_endpoints": [{
              "endpoint": {
                "address":{
                  "socket_address": {{ .datadog }}
                }
              }
            }]
          }]
        }
      }
      {{ end }}
      {{ if .envoy_metrics_service_address }}
      ,
      {
        "name": "envoy_metrics_service",
        "type": "STRICT_DNS",
      {{ if .envoy_metrics_service_tls }}
        "tls_context": {{ .envoy_metrics_service_tls }},
      {{ end }}
      {{ if .envoy_metrics_service_tcp_keepalive }}
        "upstream_connection_options": {{ .envoy_metrics_service_tcp_keepalive }},
      {{ end }}
        "respect_dns_ttl": true,
        "dns_lookup_family": "{{ .dns_lookup_family }}",
        "connect_timeout": "1s",
        "lb_policy": "ROUND_ROBIN",
        "http2_protocol_options": {},
        "load_assignment": {
          "cluster_name": "envoy_metrics_service",
          "endpoints": [{
            "lb_endpoints": [{
              "endpoint": {
                "address":{
                  "socket_address": {{ .envoy_metrics_service_address }}
                }
              }
            }]
          }]
        }
      }
      {{ end }}
      {{ if .envoy_accesslog_service_address }}
      ,
      {
        "name": "envoy_accesslog_service",
        "type": "STRICT_DNS",
      {{ if .envoy_accesslog_service_tls }}
        "tls_context": {{ .envoy_accesslog_service_tls }},
      {{ end }}
      {{ if .envoy_accesslog_service_tcp_keepalive }}
        "upstream_connection_options": {{ .envoy_accesslog_service_tcp_keepalive }},
      {{ end }}
        "respect_dns_ttl": true,
        "dns_lookup_family": "{{ .dns_lookup_family }}",
        "connect_timeout": "1s",
        "lb_policy": "ROUND_ROBIN",
        "http2_protocol_options": {},
        "load_assignment": {
          "cluster_name": "envoy_accesslog_service",
          "endpoints": [{
            "lb_endpoints": [{
              "endpoint": {
                "address":{
                  "socket_address": {{ .envoy_accesslog_service_address }}
                }
              }
            }]
          }]
        }
      }
      {{ end }}
    ],
    "listeners":[
      {
        "address": {
          "socket_address": {
            "protocol": "TCP",
            "address": "{{ .wildcard }}",
            "port_value": 15090
          }
        },
        "filter_chains": [
          {
            "filters": [
              {
                "name": "envoy.http_connection_manager",
                "typed_config": {
                  "@type": "type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager",
                  "codec_type": "AUTO",
                  "stat_prefix": "stats",
                  "route_config": {
                    "virtual_hosts": [
                      {
                        "name": "backend",
                        "domains": [
                          "*"
                        ],
                        "routes": [
                          {
                            "match": {
                              "prefix": "/stats/prometheus"
                            },
                            "route": {
                              "cluster": "prometheus_stats"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  "http_filters": [{
                    "name": "envoy.router"
                  }]
                }
              }
            ]
          }
        ]
      }
    ]
  }
  {{ if .zipkin }}
  ,
  "tracing": {
    "http": {
      "name": "envoy.zipkin",
      "typed_config": {
        "@type": "type.googleapis.com/envoy.config.trace.v2.ZipkinConfig",
        "collector_cluster": "zipkin",
        "collector_endpoint": "/api/v2/spans",
        "collector_endpoint_version": "HTTP_JSON",
        "trace_id_128bit": true,
        "shared_span_context": false
      }
    }
  }
  {{ else if .lightstep }}
  ,
  "tracing": {
    "http": {
      "name": "envoy.lightstep",
      "typed_config": {
        "@type": "type.googleapis.com/envoy.config.trace.v2.LightstepConfig",
        "collector_cluster": "lightstep",
        "access_token_file": "{{ .lightstepToken}}"
      }
    }
  }
  {{ else if .datadog }}
  ,
  "tracing": {
    "http": {
      "name": "envoy.tracers.datadog",
      "typed_config": {
        "@type": "type.googleapis.com/envoy.config.trace.v2.DatadogConfig",
        "collector_cluster": "datadog_agent",
        "service_name": "{{ .cluster }}"
      }
    }
  }
  {{ else if .stackdriver }}
  ,
  "tracing": {
    "http": {
      "name": "envoy.tracers.opencensus",
      "typed_config": {
      "@type": "type.googleapis.com/envoy.config.trace.v2.OpenCensusConfig",
      "stackdriver_exporter_enabled": true,
      "stackdriver_project_id": "{{ .stackdriverProjectID }}",
      {{ if .sts_port }}
      "stackdriver_grpc_service": {
        "google_grpc": {
          "stat_prefix": "oc_stackdriver_tracer",
          "channel_credentials": {
            "ssl_credentials": {
              "root_certs": {
                "filename": "/etc/ssl/certs/ca-certificates.crt"
              }
            }
          },
          "call_credentials": {
            "sts_service": {
              "token_exchange_service_uri": "http://localhost:{{ .stsPort }}/token",
              "subject_token_path": "/var/run/secrets/tokens/istio-token",
              "subject_token_type": "urn:ietf:params:oauth:token-type:jwt",
              "scope": "https://www.googleapis.com/auth/cloud-platform",
            }
          }
        }
      }
      {{ end }}
      "stdout_exporter_enabled": {{ .stackdriverDebug }},
      "incoming_trace_context": ["CLOUD_TRACE_CONTEXT", "TRACE_CONTEXT", "GRPC_TRACE_BIN", "B3"],
      "outgoing_trace_context": ["CLOUD_TRACE_CONTEXT", "TRACE_CONTEXT", "GRPC_TRACE_BIN", "B3"],
      "trace_config":{
        "constant_sampler":{
          "decision": "ALWAYS_PARENT"
        },
        "max_number_of_annotations": {{ .stackdriverMaxAnnotations }},
        "max_number_of_attributes": {{ .stackdriverMaxAttributes }},
        "max_number_of_message_events": {{ .stackdriverMaxEvents }},
        "max_number_of_links": 200,
       }
     }
  }}
  {{ end }}
  {{ if or .envoy_metrics_service_address .statsd }}
  ,
  "stats_sinks": [
    {{ if .envoy_metrics_service_address }}
    {
      "name": "envoy.metrics_service",
      "config": {
        "grpc_service": {
          "envoy_grpc": {
            "cluster_name": "envoy_metrics_service"
          }
        }
      }
    },
    {{ end }}
    {{ if .statsd }}
    {
      "name": "envoy.statsd",
      "config": {
        "address": {
          "socket_address": {{ .statsd }}
        }
      }
    },
    {{ end }}
  ]
  {{ end }}
  {{ if .outlier_log_path }}
  ,
  "cluster_manager": {
    "outlier_detection": {
      "event_log_path": {{ .outlier_log_path }}
    }
  }
  {{ end }}
}
